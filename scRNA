# Set working directory and load packages
setwd("/home/kobe2423/GSE135337_RAW")
library(Seurat)
library(tidyverse)
library(patchwork)
library(data.table)
library(limma)
library(RColorBrewer)
library(Nebulosa)
library(viridis)

# ----------------------------
# Data Loading and Initial Processing
# ----------------------------

# Read and process multiple samples
sample_files <- list.files()
seurat_list <- list()

for(i in seq_along(sample_files)) {
  counts <- read.table(sample_files[i], sep="\t", header=TRUE, check.names=FALSE)
  mat <- as.matrix(counts)
  rownames(mat) <- mat[,2]
  exp_mat <- mat[,3:ncol(mat)]
  dimnames <- list(rownames(exp_mat), colnames(exp_mat))
  data_mat <- matrix(as.numeric(as.matrix(exp_mat)), nrow=nrow(exp_mat), dimnames=dimnames)
  data_mat <- avereps(data_mat)
  
  # Extract sample info from filename
  sample_id <- strsplit(sample_files[i], "\\.")[[1]][1]
  project_id <- paste(strsplit(sample_id, "_")[[1]][2:3], collapse="_")
  
  seurat_list[[i]] <- CreateSeuratObject(data_mat, min.cells=3, min.features=300, project=project_id)
}

# Calculate QC metrics
for (i in seq_along(seurat_list)) {
  seurat_list[[i]][["percent.mt"]] <- PercentageFeatureSet(seurat_list[[i]], pattern="^MT-")
  seurat_list[[i]][["percent.rp"]] <- PercentageFeatureSet(seurat_list[[i]], pattern="^RP[SL]")
  seurat_list[[i]][["percent.hb"]] <- PercentageFeatureSet(seurat_list[[i]], pattern="^HB[^(P)]")
}

# Merge objects
merged_seurat <- merge(seurat_list[[1]], y=seurat_list[-1], add.cell.ids=names(seurat_list))

# Recalculate QC metrics
merged_seurat[["percent.mt"]] <- PercentageFeatureSet(merged_seurat, pattern="^MT-")
merged_seurat[["percent.rp"]] <- PercentageFeatureSet(merged_seurat, pattern="^RP[SL]")
merged_seurat[["percent.hb"]] <- PercentageFeatureSet(merged_seurat, pattern="^HB[^(P)]")

# QC plots
VlnPlot(merged_seurat, 
        features=c("nFeature_RNA", "nCount_RNA", "percent.mt", "percent.rp", "percent.hb"),
        ncol=3, pt.size=0.5, group.by="orig.ident")

# Filter cells
filtered_seurat <- subset(merged_seurat, 
                         percent.mt < 20 & 
                         nCount_RNA < 40000 & 
                         nFeature_RNA < 6000)

# ----------------------------
# Dimensionality Reduction and Clustering
# ----------------------------

processed_seurat <- filtered_seurat %>% 
  NormalizeData() %>%  
  FindVariableFeatures() %>%  
  ScaleData(features=rownames(.)) %>%  
  RunPCA(features=VariableFeatures(.), reduction.name="pca") %>%  
  RunHarmony("orig.ident", reduction.save="harmony") %>%          
  FindNeighbors(reduction="harmony", dims=1:15) %>% 
  FindClusters(resolution=0.5) %>% 
  RunUMAP(reduction="harmony", dims=1:15, reduction.name="umap")

# Visualization
ElbowPlot(processed_seurat, reduction="pca")
DimPlot(processed_seurat, reduction="umap", label=TRUE, pt.size=0.5) + NoLegend()

# ----------------------------
# Cell Type Annotation
# ----------------------------

# Load marker genes
marker_genes <- read.table("BCa_annotation.txt", sep=",")
gene_clusters <- split(marker_genes[,2], marker_genes[,1])

# Dot plot of marker genes
DotPlot(processed_seurat, features=gene_clusters, cols="RdYlBu") + RotatedAxis()

# Load cell type annotations
celltype_annotations <- read.table("anno.txt", sep=",")

# Rename clusters
new_ids <- celltype_annotations$V2
names(new_ids) <- levels(processed_seurat)
annotated_seurat <- RenameIdents(processed_seurat, new_ids)

# UMAP with annotations
DimPlot(annotated_seurat, reduction="umap", label=TRUE, pt.size=0.5) + NoLegend()

# ----------------------------
# Cell Composition Analysis
# ----------------------------

# Add metadata for grouping
annotated_seurat$group <- ifelse(annotated_seurat$orig.ident %in% c("BCN_gene"), "normal", "tumor")

# Calculate cell counts and frequencies
cell_counts <- table(Idents(annotated_seurat))
cell_stats <- cbind(counts=cell_counts, freq=round(prop.table(cell_counts)*100,2))

group_counts <- table(Idents(annotated_seurat), annotated_seurat$group)
group_freq <- round(prop.table(group_counts, margin=2)*100,2)

final_stats <- cbind(cell_stats, group_counts, group_freq)
colnames(final_stats) <- c("total_count", "total_freq", 
                          "normal_count", "tumor_count",
                          "normal_freq", "tumor_freq")

# Visualization options
# 1. Stacked bar plot
stacked_data <- as.data.frame(final_stats) %>% 
  rownames_to_column("cell_type") %>%
  pivot_longer(cols=ends_with("freq"), names_to="group", values_to="frequency")

ggplot(stacked_data, aes(x=cell_type, y=frequency, fill=group)) +
  geom_bar(stat="identity") +
  theme_minimal() +
  theme(axis.text.x=element_text(angle=45, hjust=1))

# 2. Segmented bar plot
segmented_data <- as.data.frame(final_stats) %>% 
  rownames_to_column("cell_type") %>%
  select(cell_type, normal_freq, tumor_freq) %>%
  pivot_longer(cols=-cell_type, names_to="group", values_to="frequency")

ggplot(segmented_data, aes(x=group, y=frequency, fill=cell_type)) +
  geom_bar(stat="identity", position="fill") +
  scale_fill_brewer(palette="Paired") +
  theme_minimal()

# ----------------------------
# Marker Gene Visualization
# ----------------------------

# Density plots
plot_density(annotated_seurat, c("PROC"), reduction="umap", size=0.3)
plot_density(annotated_seurat, c("CELSR1", "GSTM1", "GSTM5", "KLC3", "GPS1", "PROC"), 
             reduction="umap", size=0.3)

# Dot plot with viridis colors
markers <- c("CELSR1", "GSTM1", "GSTM5", "KLC3", "GPS1", "PROC")
dot_data <- DotPlot(annotated_seurat, features=markers, split.by="group")$data

ggplot(dot_data, aes(x=features.plot, y=id, size=pct.exp, color=avg.exp.scaled)) +
  geom_point() +
  scale_color_viridis(option="D") +
  theme_minimal() +
  RotatedAxis()
